import {CodeBuilder} from '../code-builder'
import {SimpleImportManager} from '../import-manager'
import {FilesGeneratingState} from '../state'
import {
    EnumGeneratingState,
    ExtensionGroupGeneratingState,
    FileGeneratingState,
    FileHeaderGeneratingState,
    MessageGeneratingState,
    ServiceGeneratingState
} from './state'

generate<FilesGeneratingState>('files', it => {
    for (let file of it.descriptor.files) {
        if (it.src.length != 0 && !it.src.includes(file.name())) {
            continue
        }
        const builder = new CodeBuilder(new SimpleImportManager('/' + file.tsModulePath(), it.lib))
        const elements = advance({
            kind: 'file', parent: it, descriptor: file, target: builder
        })
        if (elements > 0) {
            it.target.push({
                name: file.tsFile(),
                content: builder.build()
            })
        }
    }
})

generate<FileGeneratingState>('file', it => {
    const builder = it.target
    advance<FileHeaderGeneratingState<''>>({
        kind: 'file:header', parent: it, descriptor: '', target: builder
    })
    for (let service of it.descriptor.services) {
        advance<ServiceGeneratingState>({
            kind: 'service', parent: it, descriptor: service, target: builder
        })
    }

    for (let message of it.descriptor.messages) {
        advance<MessageGeneratingState>({
            kind: 'message', parent: it, descriptor: message, target: builder
        })
    }

    for (let enumType of it.descriptor.enums) {
        advance<EnumGeneratingState>({
            kind: 'enum', parent: it, descriptor: enumType, target: builder
        })
    }

    const extendees = it.descriptor.extensions.map(it => it.extendeeType())
        .filter((v, i, a) => a.indexOf(v) === i)

    for (let extendee of extendees) {
        advance<ExtensionGroupGeneratingState>({
            kind: 'extensionGroup', parent: it, descriptor: extendee, target: builder
        })
    }


})

generate<FileHeaderGeneratingState<''>>('file:header', it => {
    //it.target.lineComment("@generated by sisyphus.js")
    //it.target.lineComment("@generated from ${it}")
})